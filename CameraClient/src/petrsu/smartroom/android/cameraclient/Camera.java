package petrsu.smartroom.android.cameraclient;

import java.lang.String;

public class Camera {

	/** IP адрес камеры в формате IP (см. внутренние структуры данных), устанавливается конструктором.*/
	private String ip;

	/** Порт http камеры в формате port (см. внутренние структуры данных), устанавливается конструктором.*/
	private String port;

	/** Название (идентификатор) API, используемого камерой, в формате API (см. внутренние структуры данных), устанавливается конструктором.*/
	private String API;

	/** Логин пользователя для формирования http запросов камере в формате login (см. внутренние структуры данных), устанавливается конструктором.*/
	private String login;

	/** Пароль пользователя для формирования http запросов камере в формате password (см. внутренние структуры данных), устанавливается конструктором.*/
	private String pass;

	/** Массив текущих координаты поворота, наклона, зума в формате P-T-Z (см. внутренние структуры данных), устанавливается методом currentPTZ().*/
	private int PTZ[];

	/** Массив граничных значений координат поворота, наклона, зума в формате borders(см. внутренние структуры данных), устанавливается методом borders().*/
	private int borders[][];

	/** Массив строк-шаблонов URI, требуемых для формирования GET HTTP запросов (см. обмен данными с камерой). Костыль. Поля будут заполнены изначально и ничем не изменяются. 
	* Каждая строка содержит название API и строки для основных команд: получение текущей позиции, изменение позиции, получение крайних значений.
	*/
	private String stringAPI[] = {"Ankit","Bohra","Xyz",""};
	
	/**
	* Конструктор класса. Свойства IP, port, API, login, pass инициализируются соответствующими значениями.
	*
	* @param IP - ip камеры в формате IP (см. внутренние структуры данных)
	* @param port - порт http в формате port (см. внутренние структуры данных)
	* @param API - идентификатор используемого камерой API в формате API (см. внутренние структуры данных)
	* @param login - логин для запросов http в формате login (см. внутренние структуры данных)
	* @param pass - пароль для запросов http в формате pass (см. внутренние структуры данных)
	* @throws IlligalArgumentException - введены некорректные данные.
	*/
	public Camera(String IP, String port, String API, String login, String pass)
	{
		this.ip = new String(IP);
		this.port = new String(port);
		this.API = new String(API);
		this.login = new String(login);
		this.pass = new String(pass);
	};

	/** 
	* Вызывает методы из внешней библиотеки Apache HttpClient 4.3.3 для отправки запроса на камеру и получения ответа от нее. 
	* Разбирает полученный ответ и изменяет значения массива PTZ.
	* @throws IOException Ошибка транспортировки или протокола.
	*/
	private void currentPTZ()
	{};

	/** 
	* Вызывает методы из внешней библиотеки Apache HttpClient 4.3.3 для отправки запроса на камеру и получения ответа от нее. 
	* Разбирает полученный ответ и изменяет значения массива borders. 
	* @throws IOException Ошибка транспортировки или протокола.
	*/
	private void borders()
	{};

	/** 
	* Вызывает методы из внешней библиотеки Apache HttpClient 4.3.3 для отправки запроса на изменение координат наклона, поворота, зума абсолютно на значения P, T, Z соответственно, получает ответ. 
	* Разбирает полученный ответ и изменяет значения массива PTZ. 
	* @param P - поворот
	* @param T - наклон
	* @param Z - зум
	* @throws IOException Ошибка транспортировки или протокола.
	*/
	public void setPTZ(int P, int T, int Z)
	{};

	/** 
	* Вызывается после метода currentPTZ(). 
	*
	* @return массив текущих координат поворота, наклона, зума в формате P-T-Z (см. внутренние структуры данных).
	*/
	public int getCurrentPTZ()
	{ 
		return 0;
	};

	/**
	* Вызывается после метода borders(). 
	*  
	* @return массив граничных значений координат поворота, наклона, зума в формате borders (см. внутренние структуры данных).
	*/
	public int getBorders()
	{
		return 1;
	};
}